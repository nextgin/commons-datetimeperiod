name: "Create Release"

on:
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to release'
        required: true
        type: number

permissions:
  contents: write

jobs:

  release:
    runs-on: ubuntu-latest

    name: Release ${{ inputs.version }}

    outputs:
      version: ${{ steps.version.outputs.version }}
      notes: ${{ steps.cleaned-notes.outputs.notes }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: maven

      - name: Print version
        id: version
        run: |
          echo ${VERSION}
          echo "version=${VERSION}" >> "$GITHUB_OUTPUT"
        env:
          VERSION: ${{ inputs.version }}

      - name: Check if branch and version match
        id: guard
        run: |
          MAJOR_VERSION="${NUMERIC_VERSION%%.*}"
          BRANCH_MAJOR_VERSION="${BRANCH%%.*}"

          if [ "$MAJOR_VERSION" != "$BRANCH_MAJOR_VERSION" ]; then
            echo "Mismatched versions! Aborting."
            VERSION_MISMATCH='true';
          else
            echo "Versions match! Proceeding."
            VERSION_MISMATCH='false';
          fi

          echo "VERSION_MISMATCH=$(echo $VERSION_MISMATCH)" >> "$GITHUB_OUTPUT";
        env:
          BRANCH: ${{ github.ref_name }}
          NUMERIC_VERSION: ${{ steps.version.outputs.version }}

      - name: Fail if branch and release tag do not match
        if: ${{ steps.guard.outputs.VERSION_MISMATCH == 'true' }}
        uses: actions/github-script@v7
        with:
          script: |
            core.setFailed('Workflow failed. Release version does not match with selected target branch. Did you select the correct branch?')

      - name: Update pom.xml version
        run: ./bump-version.sh ${{ steps.version.outputs.version }}

      - name: Commit pom.xml
        uses: stefanzweifel/git-auto-commit-action@v5
        with:
          commit_message: "build: bump version number to ${{ steps.version.outputs.version }}"

      - name: Create JAR file
        run: mvn package

      - name: Generate release notes
        id: generated-notes
        uses: RedCrafter07/release-notes-action@main
        with:
          tag-name: ${{ steps.version.outputs.version }}
          token: ${{ secrets.GITHUB_TOKEN }}
          branch: ${{ github.ref_name }}

      - name: Cleanup release notes
        id: cleaned-notes
        run: |
          START_FROM=$(echo -n "$RELEASE_NOTES" | awk "/What's Changed/{ print NR; exit }" -)
          DROP_FROM_CONTRIBUTORS=$(echo -n "$RELEASE_NOTES" | awk "/New Contributors/{ print NR; exit }" -)
          DROP_FROM_FULL_CHANGELOG=$(echo -n "$RELEASE_NOTES" | awk "/Full Changelog/{ print NR; exit }" -)

          # Drop everything starting from "Full Changelog"
          if [ ! -z "$DROP_FROM_FULL_CHANGELOG" ]; then
              RELEASE_NOTES=$(echo -n "$RELEASE_NOTES" | sed "${DROP_FROM_FULL_CHANGELOG},$ d")
          fi

          # Drop everything starting from "New Contributors"
          if [ ! -z "$DROP_FROM_CONTRIBUTORS" ]; then
              RELEASE_NOTES=$(echo -n "$RELEASE_NOTES" | sed "${DROP_FROM_CONTRIBUTORS},$ d")
          fi

          # Drop the line "What's Changed"
          if [ ! -z "$START_FROM" ]; then
              RELEASE_NOTES=$(echo -n "$RELEASE_NOTES" | sed "${START_FROM}d")
          fi

          {
            echo 'notes<<EOF'
            echo "$RELEASE_NOTES"
            echo EOF
          } >> "$GITHUB_OUTPUT";
        env:
          RELEASE_NOTES: ${{ steps.generated-notes.outputs.release-notes }}

      - name: Create release
        uses: softprops/action-gh-release@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.version.outputs.version }}
          name: ${{ steps.version.outputs.version }}
          body: ${{ steps.cleaned-notes.outputs.notes }}
          target_commitish: ${{ github.ref_name }}
          make_latest: "${{ github.ref_name == github.event.repository.default_branch }}"
          files: |
            target/datetimeperiod-${{ steps.version.outputs.version }}.jar

  update-changelog:
    needs: release

    runs-on: ubuntu-latest

    name: Update changelog

    steps:

      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          ref: ${{ github.ref_name }}

      - name: Extract release date from git tag
        id: release_date
        run: |
          # Get UNIX timestamp from git-tag
          TIMESTAMP_OF_RELEASE_COMMIT=$(git log -1 --date=unix --format=%ad '${{ inputs.version }}');

          # Convert timestamp to UTC date in Y-m-d format
          FORMATED_DATE=$(date -u -d @$TIMESTAMP_OF_RELEASE_COMMIT +%Y-%m-%d)

          # Make date available to other steps
          echo "date=$(echo $FORMATED_DATE)" >> $GITHUB_OUTPUT;

      - name: Update Changelog
        uses: stefanzweifel/changelog-updater-action@v1
        with:
          release-date: ${{ steps.release_date.outputs.date }}
          latest-version: ${{ needs.release.outputs.version }}
          release-notes: ${{ needs.release.outputs.notes }}

      - name: Commit updated Changelog
        uses: stefanzweifel/git-auto-commit-action@v5
        with:
          branch: ${{ github.ref_name }}
          commit_message: "docs: update changelog [skip ci]"
          file_pattern: CHANGELOG.md

  update-readme-version:
    needs: release

    runs-on: ubuntu-latest

    name: Update readme

    steps:

      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          ref: ${{ github.ref_name }}

      - name: Update README.md dependency version
        run: |
          sed -i -E "
          /<artifactId>datetimeperiod<\/artifactId>/,/<\/dependency>/ {
          s|(<version>).*(<\/version>)|\1${VERSION}\2|
          }
          " README.md
        env:
          VERSION: ${{ needs.release.outputs.version }}

      - name: Commit updated Changelog
        uses: stefanzweifel/git-auto-commit-action@v5
        with:
          branch: ${{ github.ref_name }}
          commit_message: "docs: update readme [skip ci]"
          file_pattern: README.md
